name: News Commentary Bot (Gemini 2.5 Pro)

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  comment-news:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Debug - Check files
      run: |
        echo "=== –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ ==="
        ls -la
        echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ Facts.txt ==="
        if [ -f "Facts.txt" ]; then
          echo "‚úÖ Facts.txt –Ω–∞–π–¥–µ–Ω"
          echo "–†–∞–∑–º–µ—Ä: $(wc -c < Facts.txt) –±–∞–π—Ç"
        else
          echo "‚ùå Facts.txt –ù–ï –Ω–∞–π–¥–µ–Ω"
        fi
        echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Ñ–∞–π–ª–∞ ==="
        if [ -f "news_bot.py" ]; then
          echo "‚úÖ news_bot.py –Ω–∞–π–¥–µ–Ω"
        else
          echo "‚ùå news_bot.py –ù–ï –Ω–∞–π–¥–µ–Ω"
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        echo "=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ==="
        pip install google-generativeai requests beautifulsoup4 lxml
        echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ ==="
        pip list | grep -E "(google|requests|beautifulsoup4|lxml)"
        
    - name: Debug - Check environment
      run: |
        echo "=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==="
        if [ -n "$GEMINI_API_KEY" ]; then
          echo "‚úÖ GEMINI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: ${#GEMINI_API_KEY})"
        else
          echo "‚ùå GEMINI_API_KEY –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: Run news commentary
      id: run_bot
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "=== –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ ==="
        python news_bot.py
        
        echo "=== –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ==="
        echo "–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: $(pwd)"
        echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏:"
        ls -la
        
        if [ -d "commentary" ]; then
          echo "‚úÖ –ü–∞–ø–∫–∞ commentary –Ω–∞–π–¥–µ–Ω–∞"
          echo "–†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏: $(du -sh commentary 2>/dev/null || echo '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å')"
          echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ commentary:"
          ls -la commentary/ || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏"
          echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $(ls commentary/ 2>/dev/null | wc -l)"
          
          if [ "$(ls -A commentary 2>/dev/null)" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ –§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ commentary"
            
            for file in commentary/*; do
              if [ -f "$file" ]; then
                echo "=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ $file (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫) ==="
                head -5 "$file" || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª"
                echo "=========================="
              fi
            done
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå –ü–∞–ø–∫–∞ commentary –ø—É—Å—Ç–∞"
          fi
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "‚ùå –ü–∞–ø–∫–∞ commentary –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        fi
        
        echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã—Ö–æ–¥–∞ Python —Å–∫—Ä–∏–ø—Ç–∞ ==="
        echo "Exit code: $?"
      
    - name: Commit and push results
      if: steps.run_bot.outputs.success == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ commentary
        git add commentary/
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if git diff --staged --quiet; then
          echo "‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          echo "–í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å —Ç–µ–º –∂–µ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"
          
          # –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
          timestamp=$(date +"%Y%m%d_%H%M%S")
          echo "üîÑ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ω–æ–≤–æ–π –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏: $timestamp"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
          python -c "
import os
from datetime import datetime
timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
print(f'–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å timestamp: {timestamp}')
os.makedirs('commentary', exist_ok=True)
with open(f'commentary/test_{timestamp}.txt', 'w') as f:
    f.write(f'Test file created at {timestamp}')
"
          git add commentary/
        fi
        
        # –ü—Ä–æ–±—É–µ–º –∫–æ–º–º–∏—Ç–∏—Ç—å —Å–Ω–æ–≤–∞
        if ! git diff --staged --quiet; then
          git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç—è–º $(date '+%d.%m.%Y %H:%M')"
          git push origin main
          echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã"
        else
          echo "‚ÑπÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∫–æ–º–º–∏—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Report if no files created
      if: steps.run_bot.outputs.success != 'true'
      run: |
        echo "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã"
        echo "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        echo "- –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"
        echo "- –û—à–∏–±–∫–∞ API Gemini" 
        echo "- –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"
