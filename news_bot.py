import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys

def ensure_directory_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        test_file = os.path.join(directory, 'test_write.tmp')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {directory} –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {directory}: {e}")
        return False

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        if not os.path.exists('Facts.txt'):
            print("‚ö†Ô∏è –§–∞–π–ª Facts.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")
            default_facts = """
–≠—Ç–æ –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:

–≠–ö–û–ù–û–ú–ò–ö–ê:
- –†–æ—Å—Å–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–µ—Ñ—Ç—å, –≥–∞–∑, –∑–µ—Ä–Ω–æ
- –†—É–±–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ü–µ–Ω –Ω–∞ —ç–Ω–µ—Ä–≥–æ—Ä–µ—Å—É—Ä—Å—ã  
- –°–∞–Ω–∫—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é –∏ —Ñ–∏–Ω–∞–Ω—Å—ã

–ü–û–õ–ò–¢–ò–ö–ê:
- –§–µ–¥–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å 85 —Å—É–±—ä–µ–∫—Ç–∞–º–∏
- –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞
- –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –î—É–º–∞ –∏ –°–æ–≤–µ—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏

–û–ë–©–ï–°–¢–í–û:
- –ù–∞—Å–µ–ª–µ–Ω–∏–µ –æ–∫–æ–ª–æ 146 –º–ª–Ω —á–µ–ª–æ–≤–µ–∫
- –ú–Ω–æ–≥–æ–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
- –†–∞–∑–≤–∏—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

–ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ï –û–¢–ù–û–®–ï–ù–ò–Ø:
- –ß–ª–µ–Ω –û–û–ù, –ë–†–ò–ö–°, –®–û–°, –ï–ê–≠–°
- –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ö–∏—Ç–∞–µ–º, –ò–Ω–¥–∏–µ–π, —Å—Ç—Ä–∞–Ω–∞–º–∏ –ê—Ñ—Ä–∏–∫–∏
- –°–ª–æ–∂–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ó–∞–ø–∞–¥–æ–º
            """
            with open('Facts.txt', 'w', encoding='utf-8') as f:
                f.write(default_facts.strip())
            print("‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª Facts.txt")
            return default_facts.strip()
            
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–∫—Ç–æ–≤ –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if len(facts) > 50000:
            print(f"‚ö†Ô∏è Facts.txt —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(facts)} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 50000")
            facts = facts[:50000] + "\n[...—Ñ–∞–π–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞...]"
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ —Ñ–∞–∫—Ç–æ–≤ ({len(facts)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        return "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å: {model.name}")
        
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def get_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    news_items = []
    
    sources = [
        {
            'url': 'https://lenta.ru/rss/news',
            'name': 'Lenta.ru'
        },
        {
            'url': 'https://ria.ru/export/rss2/archive/index.xml',
            'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'
        }
    ]
    
    for i, source in enumerate(sources, 1):
        try:
            print(f"üîÑ [{i}/{len(sources)}] –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(source['url'], timeout=15, headers=headers)
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç {source['name']} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
            if response.status_code != 200:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç {source['name']}: {response.status_code}")
                continue
            
            response.encoding = 'utf-8'
            soup = BeautifulSoup(response.content, 'xml')
            
            items = soup.find_all('item')
            print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ {source['name']}")
            
            if not items:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ RSS {source['name']}")
                continue
            
            for j, item in enumerate(items[:3], 1):
                try:
                    title = item.title.text.strip() if item.title and item.title.text else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                    description = item.description.text.strip() if item.description and item.description.text else ""
                    link = item.link.text.strip() if item.link and item.link.text else ""
                    pub_date = item.pubDate.text.strip() if item.pubDate and item.pubDate.text else ""
                    
                    print(f"   üìù [{j}/3] {title[:60]}...")
                    
                    # –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    if description:
                        desc_soup = BeautifulSoup(description, 'html.parser')
                        description = desc_soup.get_text().strip()[:300]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                    
                    news_items.append({
                        'title': title[:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        'description': description,
                        'link': link,
                        'source': source['name'],
                        'pub_date': pub_date
                    })
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {j} —Å {source['name']}: {e}")
                    continue
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source['name']}: {e}")
            continue
    
    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    if not news_items:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ...")
        news_items = [
            {
                'title': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å 1',
                'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã',
                'link': 'https://example.com',
                'source': '–¢–µ—Å—Ç',
                'pub_date': datetime.now().strftime('%a, %d %b %Y %H:%M:%S GMT')
            }
        ]
    
    return news_items

def initialize_gemini_with_facts(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini —Å –±–∞–∑–æ–π —Ñ–∞–∫—Ç–æ–≤"""
    
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    available_models = get_available_models()
    
    if not available_models:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return None, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    model_priorities = [
        'models/gemini-1.5-flash',
        'models/gemini-1.5-pro', 
        'models/gemini-1.0-pro',
        'models/gemini-pro'
    ]
    
    selected_model = None
    for preferred_model in model_priorities:
        if preferred_model in available_models:
            selected_model = preferred_model
            break
    
    if not selected_model:
        selected_model = available_models[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
    
    print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {selected_model}")
    
    # –°–æ–∫—Ä–∞—â–∞–µ–º —Ñ–∞–∫—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
    max_facts_length = 10000  # –ú–∞–∫—Å–∏–º—É–º 10–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤
    if len(facts) > max_facts_length:
        facts = facts[:max_facts_length] + "\n[...–æ–±—Ä–µ–∑–∞–Ω–æ...]"
    
    print("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    initialization_prompt = f"""
–¢—ã - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ò–∑—É—á–∏ —ç—Ç—É –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤:

{facts}

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ñ–∞–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.
"""
    
    try:
        print("üîÑ –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Gemini...")
        model = genai.GenerativeModel(selected_model)
        
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.8,
            top_k=40,
            max_output_tokens=300,  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        )
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫ Gemini API...")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(initialization_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        response = model.generate_content(
            initialization_prompt,
            generation_config=generation_config
        )
        
        if not response or not response.text:
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return None, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîç –û—Ç–≤–µ—Ç: {response.text[:200]}...")
        
        return model, response.text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        traceback.print_exc()
        return None, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"

def generate_commentary(model, news_items, facts):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç—è–º —á–µ—Ä–µ–∑ Gemini"""
    if not news_items or not model:
        print("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        return None, None
        
    print("üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
    news_text = ""
    for i, item in enumerate(news_items[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –Ω–æ–≤–æ—Å—Ç–µ–π
        news_text += f"{i}. {item['title']}\n"
        if item['description']:
            news_text += f"   {item['description'][:200]}...\n"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        news_text += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n\n"
    
    news_analysis_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (400-500 —Å–ª–æ–≤):

{news_text}

–í–∫–ª—é—á–∏:
1. –ì–ª–∞–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
2. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏–π  
3. –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
4. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è

–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ.
"""
    
    try:
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.8,
            top_k=40,
            max_output_tokens=1000,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
        )
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫ Gemini API...")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(news_analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        response = model.generate_content(
            news_analysis_prompt,
            generation_config=generation_config
        )
        
        if not response or not response.text:
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π.", news_analysis_prompt
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∞–Ω–∞–ª–∏–∑–æ–º")
        print(f"üìù –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞: {response.text[:150]}...")
        
        return response.text, news_analysis_prompt
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        traceback.print_exc()
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", news_analysis_prompt

def save_commentary(commentary, news_items, initialization_response, news_prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–∞–π–ª"""
    print("üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not ensure_directory_exists('commentary'):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É commentary")
        return False
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    date_formatted = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        main_filename = f'commentary/news_commentary_{timestamp}.md'
        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {main_filename}")
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç—è–º - {date_formatted}\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n")
            
            for i, item in enumerate(news_items, 1):
                f.write(f"**{i}. {item['title']}**\n")
                if item['description']:
                    f.write(f"{item['description']}\n")
                f.write(f"*–ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}*\n")
                if item['link']:
                    f.write(f"[–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({item['link']})\n")
                f.write("\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(main_filename):
            file_size = os.path.getsize(main_filename)
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_filename} ({file_size} –±–∞–π—Ç)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {main_filename} –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ –∫—Ä–∞—Ç–∫–∏–π —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_filename = f'commentary/stats_{timestamp}.txt'
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π - {date_formatted}\n")
            f.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_items)}\n")
            f.write(f"–î–ª–∏–Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}\n")
            
            sources = set(item['source'] for item in news_items)
            f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)}\n")
        
        print(f"‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {stats_filename}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏
        files = os.listdir('commentary')
        print(f"‚úÖ –í –ø–∞–ø–∫–µ commentary —Å–æ–∑–¥–∞–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤:")
        for file in files:
            file_path = os.path.join('commentary', file)
            size = os.path.getsize(file_path)
            print(f"   üìÑ {file} ({size} –±–∞–π—Ç)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        traceback.print_exc()
        return False

def main():
    try:
        print("üöÄ === –ó–ê–ü–£–°–ö –ë–û–¢–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –ù–û–í–û–°–¢–ï–ô ===")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤
        facts = load_facts()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini —Å —Ñ–∞–∫—Ç–∞–º–∏
        model, initialization_response = initialize_gemini_with_facts(facts)
        if not model:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini")
            return False
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
        time.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_items = get_news()
        
        if not news_items:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
            return False
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        print("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º...")
        time.sleep(2)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        commentary, news_prompt = generate_commentary(model, news_items, facts)
        
        if not commentary:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if save_commentary(commentary, news_items, initialization_response, news_prompt):
            print("üéâ –í–°–ï –ì–û–¢–û–í–û! –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ main(): {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=" * 60)
    success = main()
    print("=" * 60)
    
    if success:
        print("‚úÖ –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –£–°–ü–ï–®–ù–û!")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if os.path.exists('commentary') and os.listdir('commentary'):
            print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ commentary/")
            files = os.listdir('commentary')
            print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            for file in files:
                size = os.path.getsize(os.path.join('commentary', file))
                print(f"   üìÑ {file} ({size} –±–∞–π—Ç)")
        else:
            print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –ü–∞–ø–∫–∞ commentary –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!")
            sys.exit(1)
            
    else:
        print("‚ùå –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô!")
        sys.exit(1)
