import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys

def ensure_directory_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {directory}: {e}")
        return False

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Facts.txt —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è Flash-Lite"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        
        if not os.path.exists('Facts.txt'):
            print("‚ùå –§–∞–π–ª Facts.txt –ù–ï –ù–ê–ô–î–ï–ù!")
            return ""
            
        file_size = os.path.getsize('Facts.txt')
        print(f"üìä –†–∞–∑–º–µ—Ä Facts.txt: {file_size} –±–∞–π—Ç ({file_size/1024/1024:.2f} –ú–ë)")
        
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –¥–ª—è Flash-Lite: 30,000 —Å–∏–º–≤–æ–ª–æ–≤ (–±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
        MAX_FACTS_SIZE = 30000
        
        if len(facts) > MAX_FACTS_SIZE:
            print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(facts)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üî™ –û–±—Ä–µ–∑–∞–µ–º –¥–æ {MAX_FACTS_SIZE} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Flash-Lite")
            
            # –£–º–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
            truncated = facts[:MAX_FACTS_SIZE]
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            search_start = max(MAX_FACTS_SIZE - 1500, 0)
            last_dot = truncated.rfind('. ', search_start)
            if last_dot > search_start:
                facts = truncated[:last_dot + 2]
            else:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü
                last_paragraph = truncated.rfind('\n\n', search_start)
                if last_paragraph > search_start:
                    facts = truncated[:last_paragraph + 2]
                else:
                    facts = truncated
            
            print(f"‚úÇÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"üîç –ù–∞—á–∞–ª–æ: {facts[:120]}...")
        print(f"üîç –ö–æ–Ω–µ—Ü: ...{facts[-120:]}")
        
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        traceback.print_exc()
        return ""

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Flash-Lite"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Flash-Lite...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                if 'flash-lite' in model.name.lower():
                    print(f"üí® Flash-Lite: {model.name}")
                elif 'flash' in model.name.lower() and '2.0' in model.name:
                    print(f"‚ö° Gemini 2.0 Flash: {model.name}")
                elif 'flash' in model.name.lower():
                    print(f"‚ö° Flash: {model.name}")
        
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def get_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–ª—è Flash-Lite"""
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è Flash-Lite...")
    news_items = []
    
    sources = [
        {'url': 'https://lenta.ru/rss/news', 'name': 'Lenta.ru'},
        {'url': 'https://ria.ru/export/rss2/archive/index.xml', 'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'}
    ]
    
    for source in sources:
        try:
            print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Å {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(source['url'], timeout=15, headers=headers)
            
            if response.status_code == 200:
                response.encoding = 'utf-8'
                soup = BeautifulSoup(response.content, 'xml')
                items = soup.find_all('item')
                
                print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                
                for item in items[:6]:  # –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è Lite
                    try:
                        title = item.title.text.strip() if item.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                        description = ""
                        if item.description and item.description.text:
                            desc_soup = BeautifulSoup(item.description.text, 'html.parser')
                            description = desc_soup.get_text().strip()
                        
                        link = item.link.text.strip() if item.link else ""
                        
                        news_items.append({
                            'title': title,
                            'description': description,
                            'source': source['name'],
                            'link': link
                        })
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                        continue
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {source['name']}: {e}")
            continue
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è Flash-Lite")
    return news_items

def initialize_flash_lite(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini 2.0 Flash-Lite"""
    
    available_models = get_available_models()
    if not available_models:
        return None, "–ù–µ—Ç –º–æ–¥–µ–ª–µ–π"
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: Gemini 2.0 Flash-Lite
    preferred_models = [
        'models/gemini-2.0-flash-lite',
        'models/gemini-2.0-flash-lite-exp',
        'models/gemini-2.0-flash',
        'models/gemini-1.5-flash'
    ]
    
    selected_model = None
    for model in preferred_models:
        if model in available_models:
            selected_model = model
            if 'lite' in model:
                print(f"üí® –í–´–ë–†–ê–ù–ê FLASH-LITE: {selected_model}")
            else:
                print(f"‚ö° –í—ã–±—Ä–∞–Ω–∞ –∑–∞–ø–∞—Å–Ω–∞—è: {selected_model}")
            break
    
    if not selected_model:
        selected_model = available_models[0]
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º: {selected_model}")
    
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Flash-Lite (–∫–æ—Ä–æ—Ç–∫–∏–µ)
        system_instruction = f"""–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:

{facts}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ—á–Ω–æ."""

        print(f"üîÑ –°–æ–∑–¥–∞–µ–º Flash-Lite —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ ({len(system_instruction)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        model = genai.GenerativeModel(
            model_name=selected_model,
            system_instruction=system_instruction
        )
        
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Lite
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            max_output_tokens=200,  # –ù–µ–±–æ–ª—å—à–æ–π –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º Flash-Lite...")
        test_response = model.generate_content(
            "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?",
            generation_config=generation_config
        )
        
        if test_response and test_response.text:
            print(f"‚úÖ Flash-Lite –≥–æ—Ç–æ–≤: {test_response.text}")
            return model, test_response.text
        else:
            print("‚ùå Flash-Lite: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return None, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flash-Lite: {e}")
        
        # Fallback: –±–µ–∑ —Ñ–∞–∫—Ç–æ–≤
        try:
            print("üîÑ Flash-Lite fallback –±–µ–∑ —Ñ–∞–∫—Ç–æ–≤...")
            simple_system = "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
            
            model = genai.GenerativeModel(
                model_name=selected_model,
                system_instruction=simple_system
            )
            
            test_response = model.generate_content(
                "–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
                generation_config=generation_config
            )
            
            if test_response and test_response.text:
                print(f"‚úÖ Flash-Lite fallback: {test_response.text}")
                return model, test_response.text
                
        except Exception as e2:
            print(f"‚ùå Flash-Lite fallback: {e2}")
        
        return None, str(e)

def generate_lite_commentary(model, news_items):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Flash-Lite"""
    if not model or not news_items:
        return None, None
    
    print("üí® Flash-Lite –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏...")
    
    # –ö—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è Lite
    news_text = ""
    for i, item in enumerate(news_items, 1):
        news_text += f"{i}. {item['title']}\n"
        if item['description']:
            # –°–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è Lite
            desc = item['description'][:200] + "..." if len(item['description']) > 200 else item['description']
            news_text += f"   {desc}\n"
        news_text += f"   ({item['source']})\n\n"
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Lite
    analysis_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏:

{news_text}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:
- –ì–ª–∞–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
- –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏
- –í—ã–≤–æ–¥—ã"""
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Flash-Lite
        generation_config = genai.types.GenerationConfig(
            temperature=0.8,
            top_p=0.9,
            max_output_tokens=2500,  # –£–º–µ—Ä–µ–Ω–Ω–æ –¥–ª—è Lite
        )
        
        print(f"üí® Flash-Lite –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ({len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        response = model.generate_content(
            analysis_prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ Flash-Lite –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return response.text, analysis_prompt
        else:
            return "Flash-Lite: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", analysis_prompt
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flash-Lite –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return f"Flash-Lite –æ—à–∏–±–∫–∞: {e}", analysis_prompt

def save_lite_results(commentary, news_items, init_response, prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Flash-Lite"""
    if not ensure_directory_exists('commentary'):
        return False
    
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S") + f"-{now.microsecond}"
    date_formatted = now.strftime("%d.%m.%Y %H:%M:%S")
    
    try:
        main_filename = f'commentary/flash_lite_analysis_{timestamp}.md'
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# –ê–Ω–∞–ª–∏–∑ Gemini 2.0 Flash-Lite - {date_formatted}\n\n")
            f.write(f"*–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini 2.0 Flash-Lite*\n\n")
            f.write("---\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## –ù–æ–≤–æ—Å—Ç–∏:\n\n")
            
            for i, item in enumerate(news_items, 1):
                f.write(f"### {i}. {item['title']}\n")
                if item['description']:
                    f.write(f"{item['description']}\n\n")
                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item['source']}\n")
                if item['link']:
                    f.write(f"**–°—Å—ã–ª–∫–∞:** {item['link']}\n")
                f.write("\n---\n\n")
        
        stats_filename = f'commentary/flash_lite_stats_{timestamp}.txt'
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write(f"=== GEMINI 2.0 FLASH-LITE ===\n")
            f.write(f"–í—Ä–µ–º—è: {date_formatted}\n")
            f.write(f"–ú–æ–¥–µ–ª—å: Gemini 2.0 Flash-Lite\n")
            f.write(f"–ù–æ–≤–æ—Å—Ç–µ–π: {len(news_items)}\n")
            f.write(f"–î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"ID: {timestamp}\n")
        
        print(f"üí® Flash-Lite —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {timestamp}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Flash-Lite: {e}")
        return False

def main():
    try:
        print("üí® === GEMINI 2.0 FLASH-LITE –ê–ù–ê–õ–ò–ó–ê–¢–û–† ===")
        
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞")
            return False
        
        genai.configure(api_key=api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–∫—Ç—ã (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –¥–ª—è Lite)
        facts = load_facts()
        if not facts:
            print("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flash-Lite
        model, init_response = initialize_flash_lite(facts)
        if not model:
            print("‚ùå Flash-Lite –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        time.sleep(1)
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_items = get_news()
        if not news_items:
            print("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
            return False
        
        time.sleep(1)
        
        # Flash-Lite –∞–Ω–∞–ª–∏–∑
        commentary, prompt = generate_lite_commentary(model, news_items)
        if not commentary:
            print("‚ùå Flash-Lite –Ω–µ —Å–æ–∑–¥–∞–ª –∞–Ω–∞–ª–∏–∑")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        return save_lite_results(commentary, news_items, init_response, prompt)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê FLASH-LITE: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
