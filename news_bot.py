import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ —Ñ–∞–∫—Ç–æ–≤ ({len(facts)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return facts
    except FileNotFoundError:
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª Facts.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return "–ë–∞–∑–æ–≤—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Facts.txt: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã —Ñ–∞–∫—Ç–æ–≤."

def get_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    news_items = []
    
    sources = [
        {
            'url': 'https://lenta.ru/rss/news',
            'name': 'Lenta.ru'
        },
        {
            'url': 'https://ria.ru/export/rss2/archive/index.xml',
            'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'
        }
    ]
    
    for i, source in enumerate(sources, 1):
        try:
            print(f"üîÑ [{i}/{len(sources)}] –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å {source['name']}...")
            response = requests.get(source['url'], timeout=15)
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç {source['name']} (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            
            response.encoding = 'utf-8'
            soup = BeautifulSoup(response.content, 'xml')
            
            items = soup.find_all('item')
            print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ {source['name']}")
            
            for j, item in enumerate(items[:3], 1):
                title = item.title.text if item.title else ""
                description = item.description.text if item.description else ""
                link = item.link.text if item.link else ""
                pub_date = item.pubDate.text if item.pubDate else ""
                
                print(f"   üìù [{j}/3] {title[:50]}...")
                
                # –û—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                if description:
                    desc_soup = BeautifulSoup(description, 'html.parser')
                    description = desc_soup.get_text()
                
                news_items.append({
                    'title': title,
                    'description': description[:300],
                    'link': link,
                    'source': source['name'],
                    'pub_date': pub_date
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source['name']}: {e}")
            continue
    
    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    return news_items

def initialize_gemini_with_facts(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini —Å –±–∞–∑–æ–π —Ñ–∞–∫—Ç–æ–≤"""
    
    print("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    initialization_prompt = f"""
–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ò–∑—É—á–∏ —Å–ª–µ–¥—É—é—â—É—é –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:

{facts}

–≠—Ç–∏ —Ñ–∞–∫—Ç—ã –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ:
- –î–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º —Å–æ–±—ã—Ç–∏—è–º
- –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ —Å–ª–µ–¥—Å—Ç–≤–∏—è
- –î–µ–ª–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
- –û–±—ä—è—Å–Ω—è—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ç—ã –∏–∑—É—á–∏–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.
"""
    
    try:
        print("üîÑ –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Gemini...")
        model = genai.GenerativeModel('gemini-pro')
        
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.8,
            top_k=40,
            max_output_tokens=500,
        )
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫ Gemini API...")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(initialization_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        response = model.generate_content(
            initialization_prompt,
            generation_config=generation_config
        )
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return model, response.text
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
        return None, None

def generate_commentary(model, news_items, facts):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç—è–º —á–µ—Ä–µ–∑ Gemini"""
    if not news_items or not model:
        print("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        return None, None
        
    print("üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    news_text = ""
    for i, item in enumerate(news_items, 1):
        news_text += f"{i}. {item['title']}\n"
        if item['description']:
            news_text += f"   {item['description']}\n"
        news_text += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n\n"
    
    news_analysis_prompt = f"""
–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ç–µ–∫—É—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑—É—á–µ–Ω–Ω—É—é –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤:

{news_text}

–ù–∞–ø–∏—à–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (400-500 —Å–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:

1. –ì–õ–ê–í–ù–´–ï –¢–†–ï–ù–î–´: –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤–∏–¥–Ω—ã –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö?
2. –ö–û–ù–¢–ï–ö–°–¢: –ö–∞–∫ —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è —Å–≤—è–∑–∞–Ω—ã —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏?
3. –ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù: –ü–æ—á–µ–º—É –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —ç—Ç–∏ —Å–æ–±—ã—Ç–∏—è?
4. –ü–†–û–ì–ù–û–ó: –ö–∞–∫–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è?
5. –°–í–Ø–ó–ò: –ö–∞–∫ —Å–æ–±—ã—Ç–∏—è –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞?

–ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
"""
    
    try:
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.8,
            top_k=40,
            max_output_tokens=1200,
        )
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫ Gemini API...")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(news_analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        response = model.generate_content(
            news_analysis_prompt,
            generation_config=generation_config
        )
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini —Å –∞–Ω–∞–ª–∏–∑–æ–º")
        print(f"üìù –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if response.candidates[0].finish_reason.name == "SAFETY":
            print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            return "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", None
        
        return response.text, news_analysis_prompt
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        return None, None

def save_commentary(commentary, news_items, initialization_response, news_prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–∞–π–ª"""
    print("üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    date_formatted = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('commentary', exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    main_filename = f'commentary/news_commentary_{timestamp}.md'
    with open(main_filename, 'w', encoding='utf-8') as f:
        f.write(f"# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç—è–º - {date_formatted}\n\n")
        f.write(f"{commentary}\n\n")
        f.write("---\n\n")
        f.write("## –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n")
        
        for i, item in enumerate(news_items, 1):
            f.write(f"**{i}. {item['title']}**\n")
            if item['description']:
                f.write(f"{item['description']}\n")
            f.write(f"*–ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}*\n")
            if item['link']:
                f.write(f"[–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({item['link']})\n")
            f.write("\n")
    
    print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_filename}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º
    dialog_filename = f'commentary/full_dialog_{timestamp}.md'
    with open(dialog_filename, 'w', encoding='utf-8') as f:
        f.write(f"# –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å Gemini - {date_formatted}\n\n")
        f.write("## 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π —Ñ–∞–∫—Ç–æ–≤\n\n")
        f.write("**–û—Ç–≤–µ—Ç Gemini –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:**\n")
        f.write(f"{initialization_response}\n\n")
        f.write("---\n\n")
        f.write("## 2. –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π\n\n")
        f.write("**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n")
        f.write(f"```\n{news_prompt}\n```\n\n")
        f.write("**–û—Ç–≤–µ—Ç Gemini:**\n")
        f.write(f"{commentary}\n\n")
    
    print(f"‚úÖ –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {dialog_filename}")

def main():
    print("üöÄ === –ó–ê–ü–£–°–ö –ë–û–¢–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –ù–û–í–û–°–¢–ï–ô ===")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv('GEMINI_API_KEY')
    if not api_key:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤
    facts = load_facts()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini —Å —Ñ–∞–∫—Ç–∞–º–∏
    model, initialization_response = initialize_gemini_with_facts(facts)
    if not model:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini")
        return
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    print("‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏...")
    time.sleep(3)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    news_items = get_news()
    
    if not news_items:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
        return
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    print("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º...")
    time.sleep(2)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    commentary, news_prompt = generate_commentary(model, news_items, facts)
    
    if commentary:
        save_commentary(commentary, news_items, initialization_response, news_prompt)
        print("üéâ –í–°–ï –ì–û–¢–û–í–û! –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

if __name__ == "__main__":
    main()
