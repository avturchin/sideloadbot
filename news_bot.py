import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys

def ensure_directory_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        test_file = os.path.join(directory, 'test_write.tmp')
        with open(test_file, 'w') as f:
            f.write('test')
        os.remove(test_file)
        print(f"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ {directory} –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {directory}: {e}")
        return False

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ü–û–õ–ù–£–Æ –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        
        if not os.path.exists('Facts.txt'):
            print("‚ùå –§–∞–π–ª Facts.txt –ù–ï –ù–ê–ô–î–ï–ù!")
            return "–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize('Facts.txt')
        print(f"üìä –†–∞–∑–º–µ—Ä Facts.txt: {file_size} –±–∞–π—Ç ({file_size/1024/1024:.2f} –ú–ë)")
        
        # –ß–∏—Ç–∞–µ–º –í–ï–°–¨ —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        actual_length = len(facts)
        print(f"‚úÖ –ü–û–õ–ù–ê–Ø –±–∞–∑–∞ —Ñ–∞–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {actual_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìä –†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {actual_length/1024/1024:.2f} –ú–ë")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        print(f"üîç –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞: {facts[:100]}...")
        print(f"üîç –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞: ...{facts[-100:]}")
        
        # –í–ê–ñ–ù–û: –ù–ï –û–ë–†–ï–ó–ê–ï–ú —Ñ–∞–π–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        traceback.print_exc()
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                if 'gemini-2.5' in model.name:
                    print(f"üéØ –î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å Gemini 2.5: {model.name}")
                else:
                    print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å: {model.name}")
        
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def get_news():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    news_items = []
    
    sources = [
        {
            'url': 'https://lenta.ru/rss/news',
            'name': 'Lenta.ru'
        },
        {
            'url': 'https://ria.ru/export/rss2/archive/index.xml', 
            'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'
        }
    ]
    
    for i, source in enumerate(sources, 1):
        try:
            print(f"üîÑ [{i}/{len(sources)}] –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(source['url'], timeout=20, headers=headers)
            
            if response.status_code == 200:
                response.encoding = 'utf-8'
                soup = BeautifulSoup(response.content, 'xml')
                items = soup.find_all('item')
                
                print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ {source['name']}")
                
                for j, item in enumerate(items[:5], 1):
                    try:
                        title = item.title.text.strip() if item.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                        description = ""
                        if item.description and item.description.text:
                            desc_soup = BeautifulSoup(item.description.text, 'html.parser')
                            description = desc_soup.get_text().strip()
                        
                        link = item.link.text.strip() if item.link else ""
                        pub_date = item.pubDate.text.strip() if item.pubDate else ""
                        
                        print(f"   üìù [{j}/5] {title[:50]}...")
                        
                        news_items.append({
                            'title': title,
                            'description': description,
                            'link': link,
                            'source': source['name'],
                            'pub_date': pub_date
                        })
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ {j}: {e}")
                        continue
                        
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –æ—Ç {source['name']}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å {source['name']}: {e}")
            continue
    
    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    return news_items if news_items else [{'title': '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å', 'description': '–¢–µ—Å—Ç', 'source': '–¢–µ—Å—Ç', 'link': '', 'pub_date': ''}]

def initialize_gemini_with_facts(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini 2.5 Pro —Å –±–∞–∑–æ–π —Ñ–∞–∫—Ç–æ–≤ –ö–ê–ö –ï–°–¢–¨"""
    
    available_models = get_available_models()
    if not available_models:
        return None, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Gemini 2.5 Pro
    preferred_models = [
        'models/gemini-2.5-pro',
        'models/gemini-2.5-pro-preview-06-05', 
        'models/gemini-2.5-pro-preview-05-06',
        'models/gemini-2.5-pro-preview-03-25'
    ]
    
    selected_model = None
    for model in preferred_models:
        if model in available_models:
            selected_model = model
            break
    
    if not selected_model:
        selected_model = available_models[0]
    
    print(f"üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {selected_model}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Facts.txt –ö–ê–ö –ï–°–¢–¨, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏ ({len(facts)} —Å–∏–º–≤–æ–ª–æ–≤)...")
    
    try:
        model = genai.GenerativeModel(selected_model)
        
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            max_output_tokens=1000,
        )
        
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Facts.txt –∫–∞–∫ –µ—Å—Ç—å...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Facts.txt
        response = model.generate_content(
            facts,  # –¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üîç –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            return model, response.text
        else:
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return None, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return None, str(e)

def generate_commentary(model, news_items):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç—è–º"""
    if not model or not news_items:
        return None, None
    
    print("üîÑ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    
    news_text = ""
    for i, item in enumerate(news_items, 1):
        news_text += f"{i}. {item['title']}\n"
        if item['description']:
            news_text += f"   {item['description']}\n"
        news_text += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n\n"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–∏
    analysis_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏:

{news_text}"""
    
    try:
        generation_config = genai.types.GenerationConfig(
            temperature=0.8,
            top_p=0.9,
            max_output_tokens=4000,
        )
        
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        response = model.generate_content(
            analysis_prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return response.text, analysis_prompt
        else:
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞", analysis_prompt
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return f"–û—à–∏–±–∫–∞: {e}", analysis_prompt

def save_commentary(commentary, news_items, initialization_response, news_prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤"""
    if not ensure_directory_exists('commentary'):
        return False
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S") + f"-{now.microsecond}"
    date_formatted = now.strftime("%d.%m.%Y %H:%M:%S")
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        main_filename = f'commentary/news_commentary_{timestamp}.md'
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π - {date_formatted}\n\n")
            f.write(f"*–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –º–æ–¥–µ–ª—å—é Gemini 2.5 Pro*\n\n")
            f.write("---\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n")
            
            for i, item in enumerate(news_items, 1):
                f.write(f"### {i}. {item['title']}\n")
                if item['description']:
                    f.write(f"{item['description']}\n\n")
                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item['source']}\n\n")
                if item['link']:
                    f.write(f"**–°—Å—ã–ª–∫–∞:** {item['link']}\n\n")
                f.write("---\n\n")
        
        # –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_filename = f'commentary/stats_{timestamp}.txt'
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write(f"=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê ===\n")
            f.write(f"–í—Ä–µ–º—è: {date_formatted}\n")
            f.write(f"–ú–æ–¥–µ–ª—å: Gemini 2.5 Pro\n")
            f.write(f"–ù–æ–≤–æ—Å—Ç–µ–π: {len(news_items)}\n")
            f.write(f"–î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {timestamp}\n")
        
        print(f"‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å ID: {timestamp}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def main():
    try:
        print("üöÄ === –ó–ê–ü–£–°–ö GEMINI 2.5 PRO –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê ===")
        
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞")
            return False
        
        genai.configure(api_key=api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ü–û–õ–ù–£–Æ –±–∞–∑—É —Ñ–∞–∫—Ç–æ–≤
        facts = load_facts()
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Facts.txt –∫–∞–∫ –µ—Å—Ç—å
        model, init_response = initialize_gemini_with_facts(facts)
        if not model:
            return False
        
        time.sleep(3)
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_items = get_news()
        if not news_items:
            return False
        
        time.sleep(2)
        
        # –ê–Ω–∞–ª–∏–∑
        commentary, prompt = generate_commentary(model, news_items)
        if not commentary:
            return False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        return save_commentary(commentary, news_items, init_response, prompt)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
