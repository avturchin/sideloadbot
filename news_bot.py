import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
import os
from datetime import datetime
import time
import traceback
import sys

def ensure_directory_exists(directory):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    try:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ {directory} —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {directory}: {e}")
        return False

def load_facts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Facts.txt –ø–æ–ª–Ω–æ—Å—Ç—å—é (Flash –ª—É—á—à–µ —Å –±–æ–ª—å—à–∏–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏)"""
    try:
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª Facts.txt...")
        
        if not os.path.exists('Facts.txt'):
            print("‚ùå –§–∞–π–ª Facts.txt –ù–ï –ù–ê–ô–î–ï–ù!")
            return ""
            
        file_size = os.path.getsize('Facts.txt')
        print(f"üìä –†–∞–∑–º–µ—Ä Facts.txt: {file_size} –±–∞–π—Ç ({file_size/1024/1024:.2f} –ú–ë)")
        
        with open('Facts.txt', 'r', encoding='utf-8') as f:
            facts = f.read()
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(facts)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üîç –ù–∞—á–∞–ª–æ: {facts[:100]}...")
        print(f"üîç –ö–æ–Ω–µ—Ü: ...{facts[-100:]}")
        
        return facts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Facts.txt: {e}")
        traceback.print_exc()
        return ""

def get_available_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Flash"""
    try:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
        models = genai.list_models()
        available_models = []
        
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                if 'flash' in model.name.lower():
                    print(f"‚ö° Flash –º–æ–¥–µ–ª—å: {model.name}")
                elif 'gemini-2' in model.name:
                    print(f"üéØ Gemini 2.x: {model.name}")
                else:
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å: {model.name}")
        
        return available_models
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return []

def get_news():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏"""
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏...")
    news_items = []
    
    sources = [
        {'url': 'https://lenta.ru/rss/news', 'name': 'Lenta.ru'},
        {'url': 'https://ria.ru/export/rss2/archive/index.xml', 'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏'}
    ]
    
    for source in sources:
        try:
            print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º —Å {source['name']}...")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            
            response = requests.get(source['url'], timeout=15, headers=headers)
            
            if response.status_code == 200:
                response.encoding = 'utf-8'
                soup = BeautifulSoup(response.content, 'xml')
                items = soup.find_all('item')
                
                print(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
                
                for item in items[:6]:  # 6 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    try:
                        title = item.title.text.strip() if item.title else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
                        description = ""
                        if item.description and item.description.text:
                            desc_soup = BeautifulSoup(item.description.text, 'html.parser')
                            description = desc_soup.get_text().strip()
                        
                        link = item.link.text.strip() if item.link else ""
                        
                        news_items.append({
                            'title': title,
                            'description': description,
                            'source': source['name'],
                            'link': link
                        })
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                        continue
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {source['name']}: {e}")
            continue
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(news_items)} –Ω–æ–≤–æ—Å—Ç–µ–π")
    return news_items

def initialize_gemini_flash(facts):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Gemini 2.5 Flash —Å –ø–æ–ª–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏"""
    
    available_models = get_available_models()
    if not available_models:
        return None, "–ù–µ—Ç –º–æ–¥–µ–ª–µ–π"
    
    # –ü–†–ò–û–†–ò–¢–ï–¢: Gemini 2.5 Flash (–ª—É—á—à–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤)
    preferred_models = [
        'models/gemini-2.5-flash',
        'models/gemini-2.5-flash-002', 
        'models/gemini-2.5-flash-001',
        'models/gemini-2.0-flash',
        'models/gemini-1.5-flash',
        'models/gemini-2.5-pro'  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    ]
    
    selected_model = None
    for model in preferred_models:
        if model in available_models:
            selected_model = model
            print(f"‚ö° –í–´–ë–†–ê–ù–ê FLASH –ú–û–î–ï–õ–¨: {selected_model}")
            break
    
    if not selected_model:
        selected_model = available_models[0]
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å: {selected_model}")
    
    try:
        model = genai.GenerativeModel(selected_model)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Flash (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)
        generation_config = genai.types.GenerationConfig(
            temperature=0.7,
            top_p=0.9,
            max_output_tokens=500,  # –ë–æ–ª—å—à–µ –¥–ª—è Flash
        )
        
        print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flash —Å {len(facts)} —Å–∏–º–≤–æ–ª–∞–º–∏...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Flash
        init_prompt = f"–ò–∑—É—á–∏ –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –∫ –∞–Ω–∞–ª–∏–∑—É –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n{facts}\n\n–û—Ç–≤–µ—Ç—å: –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
        
        response = model.generate_content(
            init_prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ Flash –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {response.text[:100]}...")
            return model, response.text
        else:
            print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Flash")
            return None, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flash –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
        # –ï—Å–ª–∏ Flash –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–æ–±—É–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        if "token" in str(e).lower() or "max" in str(e).lower():
            print("üîÑ Flash: –ø—Ä–æ–±—É–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º...")
            try:
                limited_facts = facts[:100000]  # 100K —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Flash
                limited_prompt = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{limited_facts}\n\n–ì–æ—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?"
                
                response = model.generate_content(limited_prompt, generation_config=generation_config)
                if response and response.text:
                    print(f"‚úÖ Flash —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: {response.text}")
                    return model, response.text
            except Exception as e2:
                print(f"‚ùå Flash –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")
        
        return None, str(e)

def generate_commentary(model, news_items):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ Flash"""
    if not model or not news_items:
        return None, None
    
    print("üîÑ Flash –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è Flash
    news_text = ""
    for i, item in enumerate(news_items, 1):
        news_text += f"{i}. {item['title']}\n"
        if item['description']:
            news_text += f"   {item['description']}\n"
        news_text += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n"
        if item['link']:
            news_text += f"   –°—Å—ã–ª–∫–∞: {item['link']}\n"
        news_text += "\n"
    
    # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Flash
    analysis_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

{news_text}

–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

## –û–°–ù–û–í–ù–´–ï –¢–ï–ù–î–ï–ù–¶–ò–ò
## –ö–û–ù–¢–ï–ö–°–¢ –ò –ü–†–ò–ß–ò–ù–´  
## –í–û–ó–ú–û–ñ–ù–´–ï –ü–û–°–õ–ï–î–°–¢–í–ò–Ø
## –í–´–í–û–î–´ –ò –ü–†–û–ì–ù–û–ó

–ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –∏–∑ –∏–∑—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    
    try:
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Flash
        generation_config = genai.types.GenerationConfig(
            temperature=0.8,
            top_p=0.9,
            max_output_tokens=3000,  # –ë–æ–ª—å—à–æ–π –≤—ã–≤–æ–¥ –¥–ª—è Flash
        )
        
        print(f"‚ö° Flash –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç ({len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        response = model.generate_content(
            analysis_prompt,
            generation_config=generation_config
        )
        
        if response and response.text:
            print(f"‚úÖ Flash –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return response.text, analysis_prompt
        else:
            return "Flash: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", analysis_prompt
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flash –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return f"Flash –æ—à–∏–±–∫–∞: {e}", analysis_prompt

def save_commentary(commentary, news_items, init_response, prompt):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Flash –∞–Ω–∞–ª–∏–∑–∞"""
    if not ensure_directory_exists('commentary'):
        return False
    
    now = datetime.now()
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S") + f"-{now.microsecond}"
    date_formatted = now.strftime("%d.%m.%Y %H:%M:%S")
    
    try:
        main_filename = f'commentary/flash_news_analysis_{timestamp}.md'
        
        with open(main_filename, 'w', encoding='utf-8') as f:
            f.write(f"# –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π Gemini 2.5 Flash - {date_formatted}\n\n")
            f.write(f"*–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –º–æ–¥–µ–ª—å—é Gemini 2.5 Flash*\n\n")
            f.write("---\n\n")
            f.write(f"{commentary}\n\n")
            f.write("---\n\n")
            f.write("## –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n\n")
            
            for i, item in enumerate(news_items, 1):
                f.write(f"### {i}. {item['title']}\n")
                if item['description']:
                    f.write(f"{item['description']}\n\n")
                f.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {item['source']}\n")
                if item['link']:
                    f.write(f"**–°—Å—ã–ª–∫–∞:** {item['link']}\n")
                f.write("\n---\n\n")
        
        stats_filename = f'commentary/flash_stats_{timestamp}.txt'
        with open(stats_filename, 'w', encoding='utf-8') as f:
            f.write(f"=== GEMINI 2.5 FLASH –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n")
            f.write(f"–í—Ä–µ–º—è: {date_formatted}\n")
            f.write(f"–ú–æ–¥–µ–ª—å: Gemini 2.5 Flash\n")
            f.write(f"–ù–æ–≤–æ—Å—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(news_items)}\n")
            f.write(f"–î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(commentary)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"ID: {timestamp}\n")
        
        print(f"‚ö° Flash —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {timestamp}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Flash: {e}")
        return False

def main():
    try:
        print("‚ö° === –ó–ê–ü–£–°–ö GEMINI 2.5 FLASH –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê ===")
        
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            print("‚ùå –ù–µ—Ç API –∫–ª—é—á–∞")
            return False
        
        genai.configure(api_key=api_key)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è Flash
        facts = load_facts()
        if not facts:
            print("‚ùå –ù–µ—Ç —Ñ–∞–∫—Ç–æ–≤")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flash
        model, init_response = initialize_gemini_flash(facts)
        if not model:
            print("‚ùå Flash –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        time.sleep(2)
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_items = get_news()
        if not news_items:
            print("‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
            return False
        
        time.sleep(1)
        
        # Flash –∞–Ω–∞–ª–∏–∑
        commentary, prompt = generate_commentary(model, news_items)
        if not commentary:
            print("‚ùå Flash –Ω–µ —Å–æ–∑–¥–∞–ª –∞–Ω–∞–ª–∏–∑")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Flash —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return save_commentary(commentary, news_items, init_response, prompt)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê FLASH: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
